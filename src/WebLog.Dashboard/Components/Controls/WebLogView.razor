@inherits BaseComponent<WebLogViewModel>
@using System.Diagnostics
@using global::Shared.Models
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode InteractiveServer

<div class="row mb-3 justify-content-between">
    <div class="col-lg-4 col-md-4 col-sm-12">
        <select @bind="@ViewModel.LogLevel" class="form-select" @bind:after="() => ViewModel.DropDownChangeCommand.Execute(null)">
            @foreach (var level in Enum.GetValues<FileLogLevel>().Where(x => x != FileLogLevel.None))
            {
                <option>@level</option>
                
            }
        </select>
    </div>
    <div class="col-lg-4 col-md-4 col-sm-12">
        <input class="form-control" type="search" @bind="ViewModel.SearchText" @bind:event="oninput" @bind:after="() => ViewModel.SearchChangeCommand.Execute(null)" placeholder="Message"/>
    </div>

    <div class="col-lg-4 col-md-4 col-sm-12">
        <input class="form-control" type="date" @bind="ViewModel.DateTime" @bind:event="onchange" @bind:after="() => ViewModel.DateInputChangeCommand.Execute(null)" placeholder="Search here"/>
    </div>

</div>
<div class="row justify-content-end" style="width: 100%">
    <div class="col-3">
        <FluentButton Style="float: right" Appearance="Appearance.Accent" OnClick="@(() => OnOpen())" Value="Add File" IconStart="new Icons.Regular.Size24.Add()">
            Add Path
        </FluentButton>
    </div>
</div>



<div style="height:25rem; overflow-y: auto">
    @if (ViewModel.IsNotBusy)
    {
        @if (ViewModel.Logs.Any())
        {
            <FluentDataGrid Items="@ViewModel.Logs" Virtualize="true">
                <PropertyColumn Title="Line" Property="@(p => p.LineNumber)" Width="130px"/>
                <PropertyColumn Title="Date" Property="@(p => p.Timestamp)" Sortable="true" Width="200px"/>
                <TemplateColumn Title="Log Level" Class="p-2" Width="150px">
                    <div style="background-color: @(context.Color.CssBackgroundColor); border-radius: 10px; text-align: center">
                        <span style="color:@(context.Color.CssForegroundColor); font-size: small; font-weight: bold; padding: 5px">@context.LogLevel.ToString("G").ToUpper()</span>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Message" Class="p-2">
                    <span style="width: 20ch;">@(context.State!.ToString()!.Length > 50 ? $"{context.State.ToString().AsSpan().Slice(0,50)}..." : context.State)</span>
                </TemplateColumn>
            </FluentDataGrid>
        }
        else
        {
            <div class="row justify-content-center" style="height: 100%; width: 100%">
                <div class="col-6 align-items-center position-relative">
                    <span class="position-absolute top-50 start-50 translate-middle" style="font-size: large; font-weight: bolder;">No data</span>
                </div>
            </div>
        }
    }
    else
    {
        <div class="row justify-content-center" style="height: 100%; width: 100%">
            <div class="col-6 align-items-center position-relative">
                <span class="position-absolute top-50 start-50 translate-middle" style="font-size: large; font-weight: bolder;">Loading...</span>
            </div>
        </div>
    }
    
</div>


<FluentDialog @ref="_myFluentDialog" @bind-Hidden="@Hidden" aria-label="Simple dialog" Modal=@_modal TrapFocus=@_trapFocus PreventScroll=@_preventScroll @ondialogdismiss=OnDismiss>
    <FluentDialogHeader Visible="false" />
    <h3>Add Path</h3>
    <div class="row mb-3">
        <div class="col">
            <input type="text" class="form-control" @bind="@ViewModel.FilePath" placeholder="File Path"/>
        </div>
    </div>
    <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="@(() => ViewModel.ClickCommand.Execute(_myFluentDialog))">Load</FluentButton>

</FluentDialog>


@code 
{
    private FluentDialog? _myFluentDialog;
    private bool _trapFocus = true;
    private bool _modal = true;
    private bool _preventScroll = true;
    private string? _status;
    private bool Hidden { get; set; } = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ViewModel.LoadItemsCommand.Execute(null);
        ViewModel.DateTime = DateTime.Today;
    }
    
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _myFluentDialog!.Hide();
        }
    }

    private void OnOpen()
    {
        _status = "Dialog opened with button click";
        _myFluentDialog!.Show();
        Debug.WriteLine(_status);

    }
    
    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            _myFluentDialog!.Hide();
        }
    }
}

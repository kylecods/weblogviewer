@inherits BaseComponent<WebLogViewModel>
@using System.Diagnostics
@using global::Shared.Models
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode InteractiveServer

<div class="row mb-3 justify-content-between">
    <div class="col-lg-4 col-md-4 col-sm-12">
        <select @bind="@ViewModel.LogLevel" class="form-select" @bind:after="() => ViewModel.DropDownChangeCommand.Execute(null)">
            @foreach (var level in Enum.GetValues<FileLogLevel>().Where(x => x != FileLogLevel.None))
            {
                <option>@level</option>
                
            }
        </select>
    </div>
    <div class="col-lg-4 col-md-4 col-sm-12">
        <input class="form-control" type="search" @bind="ViewModel.SearchText" @bind:event="oninput" @bind:after="() => ViewModel.SearchChangeCommand.Execute(null)" placeholder="Message"/>
    </div>

    <div class="col-lg-4 col-md-4 col-sm-12">
        <input class="form-control" type="date" @bind="ViewModel.DateTime" @bind:event="onchange" @bind:after="() => ViewModel.DateInputChangeCommand.Execute(null)" placeholder="Search here"/>
    </div>

</div>
<div class="row justify-content-end" style="width: 100%">
    <div class="col-3">
        <FluentButton Style="float: right" Appearance="Appearance.Accent" OnClick="OnOpen" Value="Add File" IconStart="new Icons.Regular.Size24.Add()">
            Add Path
        </FluentButton>
    </div>
</div>



<div style="height:25rem; overflow-y: auto">


            <FluentDataGrid Items="@ViewModel.Logs" Virtualize="true" ItemSize="44">
                <ChildContent>
                    <PropertyColumn Title="Line" Property="@(p => p.LineNumber)" Width="130px"/>
                    <PropertyColumn Title="Date" Property="@(p => p.Timestamp)" Sortable="true" Width="200px"/>
                    <TemplateColumn Title="Log Level" Class="px-4" Width="150px">
                        <div style="background-color: @(context.Color.CssBackgroundColor); border-radius: 10px; text-align: center">
                            <span style="color:@(context.Color.CssForegroundColor); font-size: small; font-weight: bold; padding: 5px">@context.LogLevel.ToString("G").ToUpper()</span>
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Message" >
                        <span style="width: 20ch;">@(context.State!.ToString()!.Length > 50 ? $"{context.State.ToString().AsSpan().Slice(0,50)}..." : context.State)</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Actions" Width="150px">
                        <FluentButton aria-label="View More" IconEnd="@(_showMore ? new Icons.Filled.Size16.EyeOff() : new Icons.Filled.Size16.Eye())" OnClick="@(() => OnOpenViewMore(context))"/>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentIcon Value="@(new Icons.Filled.Size16.Crown())" Color="@Color.Accent" />&nbsp; Nothing to see here. Carry on!
                </EmptyContent>
                <LoadingContent>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                        Loading...<br />
                        <FluentProgress Width="240px" />
                    </FluentStack>
                </LoadingContent>
            </FluentDataGrid>
    
</div>


<FluentDialog @ref="@_fluentDialog" @bind-Hidden="@_hidden" aria-label="Simple dialog" Modal="true" TrapFocus="true" PreventScroll="true" @ondialogdismiss="OnDismiss">
    <FluentDialogHeader Visible="false" />
    <h3>Add Path</h3>
    <div class="row mb-3">
        <div class="col">
            <input type="text" class="form-control" @bind="@ViewModel.FilePath" placeholder="File Path"/>
        </div>
    </div>
    <div style="display: flex; width: 100%">

        <FluentButton Appearance="Appearance.Accent" Autofocus="true" Loading="@ViewModel.IsBusy" @onclick="@(() => ViewModel.ClickCommand.Execute(_fluentDialog))">Load</FluentButton>
        
        <FluentSpacer/>

        <FluentButton OnClick="OnDismiss">Cancel</FluentButton>
    </div>
</FluentDialog>

<FluentDialog @ref="@_viewMoreDialog" @bind-Hidden="@_viewMoreHidden" aria-label="Simple dialog" Modal="true" TrapFocus="true" PreventScroll="true" @ondialogdismiss="OnDismissViewMore">
    <FluentDialogHeader Visible="false" />
    <h3>View More</h3>
    <FluentTextArea @bind-Value="@ViewModel.Content" Resize="TextAreaResize.Vertical" style="width: 100%;" Appearance="FluentInputAppearance.Filled" Placeholder="Placeholder"/>
    <div style="display: flex; width: 100%; margin-top: 10px">
        <FluentSpacer />
        <FluentButton OnClick="OnDismissViewMore">Close</FluentButton>
    </div>
</FluentDialog>


@code 
{
    private FluentDialog _fluentDialog;
    
    private FluentDialog _viewMoreDialog;

    private bool _viewMoreHidden = true;

    private bool _hidden = true;

    private bool _showMore = false;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _fluentDialog.Hide();
            _viewMoreDialog.Hide();
            ViewModel.LoadItemsCommand.Execute(null);
            ViewModel.DateTime = DateTime.Today;
        }
    }
    
    private void OnOpen(MouseEventArgs args)
    {
        _fluentDialog.Show();
    }
    
    private void OnDismiss(MouseEventArgs args)
    {
        ViewModel.FilePath = null;
        _fluentDialog.CancelAsync();
    }
    
    private void OnDismiss(DialogEventArgs args)
    {
        ViewModel.FilePath = null;
        _fluentDialog.CancelAsync();
    }
    
    private void OnOpenViewMore(LogModel logModel)
    {
        _showMore = !_showMore;

        ViewModel.Content = logModel.State!.ToString();
        
        _viewMoreDialog.Show();
        
    }
    
    private void OnDismissViewMore(MouseEventArgs args)
    {
        _showMore = !_showMore;

        ViewModel.Content = null;
        
        _viewMoreDialog.CancelAsync();
    }
    
    private void OnDismissViewMore(DialogEventArgs args)
    {
        _showMore = !_showMore;
        
        ViewModel.Content = null;

        _viewMoreDialog.CancelAsync();
    }
}

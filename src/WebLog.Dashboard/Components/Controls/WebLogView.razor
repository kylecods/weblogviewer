@inherits BaseComponent<WebLogViewModel>
@using global::Shared.Models
@rendermode InteractiveServer

<div class="row mb-3 justify-content-start">
        <div class="col-6">
            <select @bind="@ViewModel.LogLevel" class="form-select" @bind:after="() => ViewModel.DropDownChangeCommand.Execute(null)">
                @foreach (var level in Enum.GetValues<FileLogLevel>().Where(x => x != FileLogLevel.None))
                {
                    <option>@level</option>
                
                }
            </select>
        </div>
        <div class="col-6">
            <input class="form-control" type="search" @bind="ViewModel.SearchText" @onkeyup="() => ViewModel.SearchChangeCommand.Execute(null)" placeholder="Search here"/>
        </div>
    </div>

@if (ViewModel.Logs.Any())
{
    <div class="row">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@_pagination.ItemsPerPage">
                <option>5</option>
                <option>10</option>
                <option>20</option>
                <option>50</option>
            </select>
        </div>
    </div>
}

<div style="height:25rem; overflow-y: auto">
    @if (ViewModel.IsNotBusy)
    {
        @if (ViewModel.Logs.Any())
        {
            <QuickGrid Items="ViewModel.Logs" Pagination="@_pagination" Class="table table-bordered">
                <PropertyColumn Title="Line number" Class="p-2" Property="st => st.LineNumber" Align="Align.Right"/>
                <PropertyColumn Title="Timestamp" Class="p-2" Property="st => st.Timestamp" Align="Align.Right"/>
                <TemplateColumn Title="Log Level" Class="p-2" Align="Align.Center">
                    <div style="background-color: @(context.Color.CssBackgroundColor); border-radius: 10px; text-align: center">
                        <span style="color:@(context.Color.CssForegroundColor); font-size: small; font-weight: bold; padding: 5px">@context.LogLevel.ToString("G").ToUpper()</span>
                    </div>
                </TemplateColumn>
                <PropertyColumn Title="Message" Class="p-2" Property="st => st.State" Align="Align.Right"/>
            </QuickGrid>
        }
        else
        {
            <div class="row justify-content-center" style="height: 100%; width: 100%">
                <div class="col-6 align-items-center position-relative">
                    <span class="position-absolute top-50 start-50 translate-middle" style="font-size: large; font-weight: bolder;">No data</span>
                </div>
            </div>
        }
    }
    else
    {
        <div class="row justify-content-center" style="height: 100%; width: 100%">
            <div class="col-6 align-items-center position-relative">
                <span class="position-absolute top-50 start-50 translate-middle" style="font-size: large; font-weight: bolder;">Loading...</span>
            </div>
        </div>
    }
    
</div>


@if (ViewModel.Logs.Any())
{
    <Paginator State="@_pagination"/>
}

@code 
{
    private PaginationState _pagination = new () { ItemsPerPage = 10 };
    
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ViewModel.LoadItemsCommand.Execute(null);
    }
}
